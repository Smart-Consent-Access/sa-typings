/**
 * @ao/ah-api
 * Telia Smart Access API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ActionStringDTO } from './ActionStringDTO';
import { ConditionStringDTO } from './ConditionStringDTO';
import { ExpressionDTO } from './ExpressionDTO';
import { HttpFile } from '../http/http';

/**
* Fields to filter on in the search. Atleast reqServiceProviderId or consServiceProviderId or both is required and the searching serviceprovider (caller) must be one of them. Alternatively only consentRequestId can be specified, then the caller must be the requester or consenter for that request. The other fields are optional. It is a search hit if all fields matches a consent request (AND)
*/
export class SearchConsentsDTOFields {
    /**
    * Consented condition. Take all consents that matches atleast one condition (all conditions do not have to match the same consent). Empty list matches all
    */
    'condition'?: Array<ConditionStringDTO>;
    /**
    * Consented resource. Take all consents that matches atleast one resource tag (all tags do not have to match the same consent). Empty list matches all
    */
    'resourceTag'?: Array<ExpressionDTO>;
    'action'?: ActionStringDTO;
    /**
    * Id of the consenting principal (some user). Take all consents that matches an id (all ids do not have to match the same consent). Empty list matches all
    */
    'consPrincipalId'?: Array<string>;
    /**
    * type of consent. For now this is CONSENT_APPROVAL or CONSENT_REJECTION
    */
    'type'?: string;
    /**
    * Only take consents for consent request of id
    */
    'consentRequestId'?: string;
    /**
    * Only take consents created before or equal to this timestamp.
    */
    'stopCreatedAt'?: string;
    /**
    * Only take consents created after or equal to this timestamp. Will be passed to JavaScripts Date constructor so must be a valid time-string that is accepted. The database stores dates without timezone (UTC) and the comparison is done without timezone
    */
    'startCreatedAt'?: string;
    /**
    * Consent status: \"INITIALIZED\", \"FINALIZED\" or \"INACTIVE\"
    */
    'status'?: string;
    /**
    * The serviceprovider that consented the request (consumer)
    */
    'consServiceProviderId'?: string;
    /**
    * The serviceprovider that requested the consent (producer)
    */
    'reqServiceProviderId'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "condition",
            "baseName": "condition",
            "type": "Array<ConditionStringDTO>",
            "format": ""
        },
        {
            "name": "resourceTag",
            "baseName": "resourceTag",
            "type": "Array<ExpressionDTO>",
            "format": ""
        },
        {
            "name": "action",
            "baseName": "action",
            "type": "ActionStringDTO",
            "format": ""
        },
        {
            "name": "consPrincipalId",
            "baseName": "consPrincipalId",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "consentRequestId",
            "baseName": "consentRequestId",
            "type": "string",
            "format": ""
        },
        {
            "name": "stopCreatedAt",
            "baseName": "stopCreatedAt",
            "type": "string",
            "format": ""
        },
        {
            "name": "startCreatedAt",
            "baseName": "startCreatedAt",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "consServiceProviderId",
            "baseName": "consServiceProviderId",
            "type": "string",
            "format": ""
        },
        {
            "name": "reqServiceProviderId",
            "baseName": "reqServiceProviderId",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SearchConsentsDTOFields.attributeTypeMap;
    }
    
    public constructor() {
    }
}

